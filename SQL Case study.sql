select * from dbo.fact
select * from dbo.Product
select * from dbo.Location

--Task  to be Performed.

--Display the number of states present in the LocationTable.

select Count( distinct state) as [Count of state] from dbo.Location

--How many products are of regular type?

select * from dbo.Product

select count(product) as [Count of product] from dbo.Product
where type='Regular'

--How much spending has been done on marketing of product ID 1?

select sum(marketing) as [sum of market] from dbo.fact
where productid=1

--What is the minimum sales of a product?

select min(sales) as [min sales] from [fact (3)]

--Display the max Cost of Good Sold (COGS).

select max(COGS) as[Max of COGS] from [fact (3)]

--Display the details of the product where product type is coffee.

select * from dbo.Product
where Product_Type='coffee'

--Display the details where total expenses are greater than 40.

select * from [fact (3)]
where Total_Expenses>40


--What is the average sales in area code 719?

select avg(sales) as [avg sales] from dbo.fact
where Area_Code=719

--Find out the total profit generated by Colorado state.

select sum(profit) as [Sum of profit] from dbo.fact as F
inner Join
dbo.Location as L
on 
F.Area_Code=L.Area_Code
where state ='colorado'

--Display the average inventory for each product ID.

select avg(inventory) as [avg of inventory],ProductId
from [fact (3)]
group by ProductId
order by ProductId 

--Display state in a sequential order in a Location Table.

select State from dbo.Location
order by state

--Display the average budget of the Product where the average budget
--margin should be greater than 100.

select avg(budget_margin) as [avg burget mergin],ProductId
from [fact (3)]
group by ProductId
having avg(budget_margin)>100

--What is the total sales done on date 2010-01-01?

select sum(sales) as [Total sales]
from [fact (3)]
where Date='2010-01-01'

--Display the average total expense of each product ID on an individual date.

select Avg(Total_Expenses) as [avg total expenses] ,productid,date
from [fact (3)]
group by ProductId,date
order by productid,date


--Display the table with the following attributes 
--such as date, productID, product_type, product, sales, profit, state, area_code.

select F.date,P.ProductId,P.Product_Type,P.Product,F.Sales,F.Profit,L.State,L.Area_Code
from [fact (3)] F
inner join
dbo.Location as L
On
F.Area_Code=L.Area_Code
Inner Join
dbo.Product as P
On 
F.ProductId=P.ProductId


--Display the rank without any gap to show the sales wise rank.
select date,productid,sales, DENSE_RANK() over (order by sales )

as [Sales order]
from [fact (3)]

--Find the state wise profit and sales.

select L.State,sum(sales) as [Sum of sales],sum(profit) as [sum of profit]
from [fact (3)] F
inner join dbo.Location as L
on
F.Area_Code=L.Area_Code
group by L.State
order by L.State


--Find the state wise profit and sales along with the productname.

select L.State,sum(sales) as [Sum of sales],sum(profit) as [sum of profit],P.Product
from [fact (3)] F
inner join dbo.Location as L
on
F.Area_Code=L.Area_Code
inner join
dbo.Product as P
On
P.ProductId=F.ProductId
group by L.State,P.Product
order by L.State,P.Product



select sales,(sales*1.05) as [Sales increase value] from [fact (3)]

--5%->5/100+1=1.05

--Find the maximum profit along with the product ID and producttype.

select max(profit) as [ max of profit ] ,P.ProductId,P.Product_Type
from [fact (3)] F
Inner Join
dbo.Product as P
On
P.ProductId=F.ProductId
group by P.Product_Type,P.ProductId
Order by P.Product_Type,P.ProductId

--Create a stored procedure to fetch the result according to the product type
--from Product Table.

 create proc prtype(@prod_type varchar(50))
 as
 begin
 select * from dbo.Product
 where Product_Type=@prod_type
 end

 exec ptype @prod_type='Coffee'
 exec ptype @prod_type='tea'

 --Write a query by creating a condition in which if the total expenses is less than
--60 then it is a profit or else loss.


--Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical order.

select datepart(week,date) as weeknumber,productid,sum(sales) as weekly_sales
from [fact (3)]
group by datepart(week,date),productid with RollUp

--Apply union and intersection operator on the tables which consist of
--attribute area code.

select area_code from [fact (3)]
Union
select area_code from dbo.Location


select area_code from [fact (3)]
Intersect
select area_code from dbo.Location

--Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference.

create function producttable(@protyp varchar(50))
returns table
as
return
select * from dbo.Product
where Product_Type=@protyp

select * from dbo.producttable('coffee')

--Change the product type from coffee to tea where product ID is 1 and undo
--it.

begin transaction;

Update dbo.Product
set Product_Type='tea'
where ProductId=1

select * from dbo.Product

rollback transaction

--Display the date, product ID and sales where total expenses are
--between 100 to 200.

select Date,ProductId,Sales,Total_Expenses
from [fact (3)]
where Total_Expenses between 100 and 200

--Delete the records in the Product Table for regular type.

delete from dbo.Product
where Type='Regular'

select * from dbo.Product


 



